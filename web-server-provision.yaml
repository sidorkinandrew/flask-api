---
- hosts: tag_aws_autoscaling_groupName_flask_api_asg
  remote_user: ubuntu
  become: true
  gather_facts: true

  vars:
    - ansible_ssh_private_key_file: ".ssh/flask-api-key-pair.pem"
    - docker_compose_url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
    - github_repo: 'https://github.com/sidorkinandrew/flask-api.git' # 'git@github.com:sidorkinandrew/flask-api-private.git' # 'https://github.com/sidorkinandrew/flask-api.git'
    - app_dir: /app
    - ssh_key_filename: my_project_key

  vars_prompt:
    - name: "db_endpoint"
      prompt: "Enter the DB endpoint"
    - name: "db_password"
      prompt: "Enter the password for DB"
    - name: "GITHUB_ACCESS_TOKEN"
      prompt: "Add your write:public_key token from github account"

  tasks:
    - name: Update all packages
      apt:
        update_cache: yes
        name: "*"
        state: latest

    - name: Install dependencies
      apt:
        pkg:
          - curl
          - ca-certificates
          - gnupg
          - lsb-release
          - htop
          - wget
          - mc
          - git
          - python3-docker
          - python3-pip
          - python3-setuptools

    - name: Add Docker GPG apt Key
      apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present
        keyring: /etc/apt/trusted.gpg.d/docker.gpg

    - name: Add Docker Repository
      apt_repository:
        repo: "deb https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        filename: docker
        state: present

    - name: Install docker-ce
      apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
          - docker-compose-plugin
        state: latest
        update_cache: true

    - name: Add "ubuntu" user to the "docker" group
      remote_user: ubuntu
      user:
        name: "ubuntu"
        group: "docker"
        append: yes

    - name: Install docker-compose from official github repo
      get_url:
        url: "{{ docker_compose_url }}"
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'

    - name: Generate SSH key "{{ssh_key_filename}}"
      delegate_to: localhost
      run_once: yes
      become: no
      user:
        name: "{{ ansible_user }}"
        generate_ssh_key: yes
        ssh_key_type: ed25519
        ssh_key_file: .ssh/{{ ssh_key_filename }}
        force: no

    - name: the public key output
      pause:
        prompt: "{{ lookup('file', lookup('env','HOME') + '/.ssh/{{ ssh_key_filename }}.pub') }}"

    - name: Add SSH public key to GitHub account
      uri:
        url: https://api.github.com/user/keys
        validate_certs: no
        method: POST
        body:
          title: "Ansible-generated deploy key"
          key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/{{ ssh_key_filename }}.pub') }}"
        body_format: json
        headers:
          Content-Type: "application/json"
          Authorization: "token {{ GITHUB_ACCESS_TOKEN }}"
      register: task_log
      run_once: yes
      failed_when: task_log.content.find('"key is already in use"') == 0

    - name: Ensure the private key is present on the remotes
      copy: 
        src: "{{ lookup('env','HOME') }}/.ssh/{{ ssh_key_filename }}"
        dest: "/home/{{ ansible_user }}/.ssh/{{ ssh_key_filename }}" 
        mode: 0400

    - name: Restart secure shell daemon post configuration
      service: 
        name: sshd
        state: restarted



    - name: Clone the code repository to the app_dir
      git:
        repo: "{{ github_repo }}"
        dest: "{{ app_dir }}"
        force: yes
        accept_hostkey: yes
        key_file: "/home/{{ ansible_user }}/.ssh/{{ ssh_key_filename }}"

    - name: Rename .env.example to .env
      command: mv "{{ app_dir }}/.env.example" "{{ app_dir }}/.env"
      args:
        removes: "{{ app_dir }}/.env.example"
        creates: "{{ app_dir }}/.env"

    - name: replacing db endpoint in .env file
      lineinfile: 
        path: "{{ app_dir }}/.env"
        regexp: '^(.*)DB_HOSTNAME=(.*)$' 
        line: 'DB_HOSTNAME={{ db_endpoint }}'
        backrefs: yes

    - name: replacing db password in .env file
      lineinfile: 
        path: "{{ app_dir }}/.env"
        regexp: '^(.*)MYSQL_PASSWORD=(.*)$' 
        line: 'MYSQL_PASSWORD={{ db_password }}'
        backrefs: yes

    - name: Deploy via docker-compose
      community.docker.docker_compose:
        project_src: "{{ app_dir }}"
        state: absent
        files:
          - docker-compose.yaml

    - name: Deploy via docker-compose
      community.docker.docker_compose:
        project_src: "{{ app_dir }}"
        build: yes
        state: present
        files:
          - docker-compose.yaml

#    - name: Run the stack of containers via docker-compose
#      become: true
#      shell:
#        cmd: "docker-compose -f docker-compose.yaml up -d"
#        chdir: /app/

